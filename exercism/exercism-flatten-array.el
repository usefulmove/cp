(defun list-flatten (lst)
  (let ((head (car lst))
        (rest (cdr lst)))
    (cond ((null lst) '())
          ((listp head) (append (list-flatten head)
                                (list-flatten rest)))
          (t (cons head (list-flatten rest))))))

(list-flatten '())
(list-flatten '(0 1 2))
(list-flatten '(1 (2 3 4 5 6 7) 8 ))
(list-flatten '(0 2 ((2 3) 8 100 4 (((50)))) -2))
(list-flatten '(1 2 nil))
(list-flatten '(1 nil 2 nil))
