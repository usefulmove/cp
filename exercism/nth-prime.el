(defun prime-p (n)
  (cond ((<= n 1) nil)
        ((= n 2) t)
        ((= (% n 2) 0) nil)
        (t (let ((i 3) (is-prime t))
             (while (and is-prime (<= (* i i) n))
               (if (= (% n i) 0)
                   (setq is-prime nil)
                 (setq i (+ i 2))))
             is-prime))))

(defun prime (number)
  (if (<= number 0)
      (error "entered zero or negative number")
    (let ((x 2) (n 1))
      (while (not (and (prime-p x) (= n number)))
        (if (prime-p x)
            (setq n (1+ n)))
        (setq x (1+ x)))
      x)))
