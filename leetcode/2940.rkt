#lang racket

(define (leftmost-building-queries heights queries)
  (let ((indicies (range (length queries))))
    (map
     (lambda (index)
       (let* ((query (list-ref queries index))
              (a (first query))
              (b (second query))
              (a-height (list-ref heights a))
              (b-height (list-ref heights b)))
         (cond ((or (= a b)
                    (and (> a b)
                         (> a-height b-height))) a)
               ((and (> b a)
                     (> b-height a-height)) b)
               (else (let ((start (max a b)))
                       (let loop ((ind (+ start 1))
                                  (hs (drop heights (+ start 1))))
                         (cond ((empty? hs) -1)
                               ((and (> (car hs) a-height)
                                     (> (car hs) b-height)) ind)
                               (else (loop (+ ind 1)
                                           (cdr hs))))))))))
     indicies)))

(leftmost-building-queries '(6 4 8 5 2 7) '((0 1) (0 3) (2 4) (3 4) (2 2))) ; => '(2 5 -1 5 2)
(leftmost-building-queries '(5 3 8 2 6 1 4 6) '((0 7) (3 5) (5 2) (3 0) (1 6))) ; => '(7 6 -1 4 6)
(leftmost-building-queries '(1 2 1 2 1 2) '((0 0) (0 1) (0 2) (0 3) (0 4) (0 5) (1 0) (1 1) (1 2) (1 3) (1 4) (1 5) (2 0) (2 1) (2 2) (2 3) (2 4) (2 5) (3 0) (3 1) (3 2) (3 3) (3 4) (3 5) (4 0) (4 1) (4 2) (4 3) (4 4) (4 5) (5 0) (5 1) (5 2) (5 3) (5 4) (5 5))) ; => '(0 1 3 3 5 5 1 1 -1 -1 -1 -1 3 -1 2 3 5 5 3 -1 3 3 -1 -1 5 -1 5 -1 4 5 5 -1 5 -1 5 5)
