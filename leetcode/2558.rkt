#lang racket

(define (pick-gifts gifts k)
  (let loop ((gs gifts)
             (iteration 0))
    (if (= iteration k)
        (apply + gs)
        (loop (let* ((max-pair (let loop ((xs gs)
                                          (ind 0)
                                          (max-so-far 0)
                                          (max-index-so-far -1))
                                 (if (empty? xs)
                                     (cons max-index-so-far max-so-far)
                                     (if (> (car xs) max-so-far)
                                         (loop (cdr xs)
                                               (+ ind 1)
                                               (car xs)
                                               ind)
                                         (loop (cdr xs)
                                               (+ ind 1)
                                               max-so-far
                                               max-index-so-far)))))
                     (max-index (car max-pair))
                     (maximum (cdr max-pair)))
                (append (take gs max-index)
                        (list (inexact->exact (floor (sqrt maximum))))
                        (drop gs (+ max-index 1))))
              (+ iteration 1)))))

(pick-gifts '(25 64 9 4 100) 4)
(pick-gifts '(1 1 1 1) 4)
